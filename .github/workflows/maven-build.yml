name: Java Maven CI - TIP WLAN Cloud Master

on: 
  push:
    branches: [ master ]

  schedule:
    # runs nightly build at 5AM
    - cron:  '00 09 * * *'
      
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.GH_AUTOMATION_KEY }}
          submodules: true
      - name: Set up JDK 1.14
        uses: actions/setup-java@v1
        with:
          java-version: 14
      - name: maven version
        run:
          mvn -v
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2
      - name: Login to TIP Docker registry 
        uses: azure/docker-login@v1
        with:
          login-server: tip-tip-wlan-cloud-docker-repo.jfrog.io
          username: build-pipeline
          password: ${{ secrets.MAVEN_REPO_PASSWORD }}
      - name: Configure maven settings.xml
        run: cp .github/workflows/maven_settings_template.xml /home/runner/.m2/settings.xml
      - name: Updating commit file
        run: |          
          TIMESTAMP=$(date +'%Y-%m-%d')
          MVN_VERSION=$(mvn --file wlan-cloud-root/pom.xml -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo date=$TIMESTAMP > wlan-cloud-base/base-container/src/main/resources/commit.properties
          echo commitId=$GITHUB_SHA >> wlan-cloud-base/base-container/src/main/resources/commit.properties
          echo projectVersion=$MVN_VERSION>> wlan-cloud-base/base-container/src/main/resources/commit.properties          
      - name: Build with Maven - test
        run: 
          mvn -B --file all-modules-build/pom.xml verify # Ensure all artifacts build successfully before we attempt deploy in order to prevent partial deploys.
        env:
          MAVEN_REPO_USERNAME: build-pipeline
          MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}
      - name: Build with Maven - deploy artifacts
        run:
          mvn -B --file all-modules-build/pom.xml -DskipTests deploy # Now that all builds have completed, we can deploy all the artifacts.
        env:
          MAVEN_REPO_USERNAME: build-pipeline
          MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}
      - name: Build and deploy the docker images for the static OpenSync gateway
        run:
          mvn -B --file wlan-cloud-opensync-controller/opensync-gateway-static-docker/pom.xml deploy
        env:
          MAVEN_REPO_USERNAME: build-pipeline
          MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}
      - name: Build and deploy the docker images for the cloud OpenSync gateway
        run:
          mvn -B --file wlan-cloud-opensync-controller/opensync-gateway-cloud-docker/pom.xml deploy
        env:
          MAVEN_REPO_USERNAME: build-pipeline
          MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}
      - name: Build and deploy the docker images for the all-cloud-and-opensync-gw-in-one process
        run:
          mvn -B --file wlan-cloud-services/all-cloud-and-opensync-gw-in-one-docker/pom.xml deploy
        env:
          MAVEN_REPO_USERNAME: build-pipeline
          MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}
      - name: Build and deploy the docker images for the all-cloud-in-one process
        run:
          mvn -B --file wlan-cloud-services/all-cloud-in-one-docker/pom.xml deploy
        env:
          MAVEN_REPO_USERNAME: build-pipeline
          MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}
      - name: Build and deploy the docker image for the Portal process
        run:
          mvn -B --file wlan-cloud-services/portal-docker/pom.xml deploy
        env:
          MAVEN_REPO_USERNAME: build-pipeline
          MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}
      - name: Build and deploy the docker images for the Provisioning process
        run:
          mvn -B --file wlan-cloud-services/prov-docker/pom.xml deploy
        env:
          MAVEN_REPO_USERNAME: build-pipeline
          MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}
      - name: Build and deploy the docker images for the Scalable Service Container process
        run:
          mvn -B --file wlan-cloud-services/ssc-docker/pom.xml deploy
        env:
          MAVEN_REPO_USERNAME: build-pipeline
          MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}
      - name: Build and deploy the docker images for the Stream Processor process
        run:
          mvn -B --file wlan-cloud-services/spc-docker/pom.xml deploy
        env:
          MAVEN_REPO_USERNAME: build-pipeline
          MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}
      - name: Build and deploy the docker images for the Port Forwarding Gateway process
        run:
          mvn -B --file wlan-cloud-services/port-forwarding-gateway-docker/pom.xml deploy
        env:
          MAVEN_REPO_USERNAME: build-pipeline
          MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}
      - name: Generate and push the cloud-sdk-schema
        run:
          mvn -B --file wlan-cloud-services/schema-generator/pom.xml deploy
        env:
          MAVEN_REPO_USERNAME: build-pipeline
          MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}
